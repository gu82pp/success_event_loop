/**
 * –ö–ª–∞—Å QueueLoader –¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π —Å–∫—Ä–∏–ø—Ç—ñ–≤.
 * –ü—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤: [['depA', 'depB'], ['mainLogic']].
 */
class QueueLoader {
    
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.
     * (–õ–æ–≥—ñ–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Promises –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
     * @param {string} url - –®–ª—è—Ö –¥–æ —Å–∫—Ä–∏–ø—Ç–∞.
     * @returns {Promise<string>}
     */
    _loadSingleScript(url) {

        // 1. –ü–æ—á–∞—Ç–æ–∫ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
        const startLoadTime = performance.now(); 

        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = url;
            script.type = 'text/javascript';
            script.defer = true; 

            script.onload = () => {
                // 2. –ö—ñ–Ω–µ—Ü—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                const endLoadTime = performance.now();
                const duration = (endLoadTime - startLoadTime).toFixed(2);
                
                // console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${url} (–ß–∞—Å: ${duration} –º—Å)`);
                
                // –¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–µ –ª–∏—à–µ URL, –∞–ª–µ –π –¥–∞–Ω—ñ –ø—Ä–æ —á–∞—Å
                resolve({ url, duration: parseFloat(duration) });
                // console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${url}`);
                // resolve(url);
            };

            script.onerror = () => {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${url}`);
                reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç: ${url}`));
            };

            document.body.appendChild(script);
        });
    }

    // ------------------------------------------------------------------
    
    /**
     * –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–∫—Ä–∏–ø—Ç–∏ –ø–∞—Ä—Ç—ñ—è–º–∏.
     * @param {string[][]} batches - –ú–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤ URL-–∞–¥—Ä–µ—Å, –¥–µ –∫–æ–∂–µ–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–∞—Å–∏–≤ - —Ü–µ –ø–∞—Ä—Ç—ñ—è.
     * @returns {Promise<string[]>} Promise, —â–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä—Ç—ñ–π.
     */
    async loadBatches(batches) {

        // 1. –ü–æ—á–∞—Ç–æ–∫ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        const overallStartTime = performance.now(); 
        let totalResults = [];

        // console.log(`üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${batches.length} –ø–∞—Ä—Ç—ñ–π.`);

        // –Ü—Ç–µ—Ä—É—î–º–æ –ø–æ –∫–æ–∂–Ω—ñ–π –ø–∞—Ä—Ç—ñ—ó (–≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º—É –º–∞—Å–∏–≤—É)
        for (const [index, batch] of batches.entries()) {
            // console.log(`\n--- –ü–æ—á–∞—Ç–æ–∫ –ü–∞—Ä—Ç—ñ—ó ${index + 1} (${batch.length} —Å–∫—Ä–∏–ø—Ç—ñ–≤) ---`);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ Promises –¥–ª—è –≤—Å—ñ—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ —É –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞—Ä—Ç—ñ—ó
            const promises = batch.map(url => this._loadSingleScript(url));

            try {
                // –ß–µ–∫–∞—î–º–æ, –¥–æ–∫–∏ –í–°–Ü —Å–∫—Ä–∏–ø—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞—Ä—Ç—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
                const batchResults = await Promise.all(promises);
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó
                totalResults = totalResults.concat(batchResults); 
                
                // console.log(`--- –ü–∞—Ä—Ç—ñ—è ${index + 1} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ---`);

            } catch (error) {
                // –Ø–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç —É –ø–∞—Ä—Ç—ñ—ó –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è, –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –ü–∞—Ä—Ç—ñ—ó ${index + 1}. –û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞.`, error.message);
                throw error; // –í–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ .catch
            }
        }

        // 2. –ö—ñ–Ω–µ—Ü—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        const overallEndTime = performance.now();
        const overallDuration = (overallEndTime - overallStartTime).toFixed(2); 
        

        // console.log("\n-----------------------------------------");
        // console.log("üéâ –£—Å—ñ –ø–∞—Ä—Ç—ñ—ó —Å–∫—Ä–∏–ø—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å, —è–∫–∏–π –º–∏–Ω—É–≤
        console.log(`‚è±Ô∏è –§–∞–∫—Ç–∏—á–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–∑ –º–æ–º–µ–Ω—Ç—É —Å—Ç–∞—Ä—Ç—É): ${overallDuration} –º—Å`);
        

        return totalResults;
    }
}

// =================================================================
// üöÄ –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø
// =================================================================

const loader = new QueueLoader();

// –ß–µ—Ä–≥–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:
const scriptQueue = [
    // –ü–∞—Ä—Ç—ñ—è 1: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    [   
        './src/World.js',
        './src/utils/createDomElement.js',
        './src/utils/debugger.js',
        './src/utils/switchAnimation.js',
        './src/utils/Uuid.js',
    ], 
    
    // –ü–∞—Ä—Ç—ñ—è 2: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ü–∞—Ä—Ç—ñ—ó 1, –ø–æ—Ç—ñ–º –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    [
        // './src/components/1_buildHeaderCountentFooterOuter.js',
        './src/components/2_buildHeaderDOM.js',
        './src/components/3_buildHeaderButtonOuter.js',
        './src/components/4_buildContentDOM.js',
        './src/components/5_buildFooterDOM.js',
    ], 
    [
        './src/components/0_render.js',
    ]
];

loader.loadBatches(scriptQueue)
    .then(() => {
        // console.log('\n–£—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ. –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É.');
    })
    .catch(error => {
        console.error('\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂—É –∞–±–æ —à–ª—è—Ö–∏ –¥–æ —Å–∫—Ä–∏–ø—Ç—ñ–≤.');
    });