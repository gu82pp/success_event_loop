

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
// –¶–µ–π –∫–æ–¥ –∑–∞–º—ñ–Ω—é—î –≤–∞—à—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ä—è–¥–∫–∏:

/**
 * –û–±—á–∏—Å–ª—é—î —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.
 * @param {number} lastCompletedAt - Unix-timestamp –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫—É–Ω–¥–∏).
 * @param {number} repeatInterval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä—É —É —Ö–≤–∏–ª–∏–Ω–∞—Ö.
 * @returns {string} - HTML-—Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –∞–±–æ —á–µ—Ä–≤–æ–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
 */
function getTaskCountdownHTML(lastCompletedAt, repeatInterval) {
    if (repeatInterval <= 0) {
        // –ó–∞–¥–∞—á–∞ –Ω–µ –º–∞—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–æ–≤—Ç–æ—Ä—É, –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
        return '‚Äî'; 
    }

    const now = Date.now(); // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ß–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    // lastCompletedAt (—Å–µ–∫—É–Ω–¥–∏) * 1000 + repeatInterval (—Ö–≤–∏–ª–∏–Ω–∏) * 60 * 1000
    const nextExecutionTime = (lastCompletedAt + repeatInterval * 60) * 1000;
    
    const timeRemainingMs = nextExecutionTime - now;

    if (timeRemainingMs <= 0) {
        // –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Å—Ç–∞–≤ –∞–±–æ –º–∏–Ω—É–≤
        return `<span style="color: red; font-weight: bold;">TODO!</span>`;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è (–≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω)
    const totalSeconds = Math.floor(timeRemainingMs / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);

    let countdownString = '';

    if (hours > 0) {
        countdownString += `${hours} –≥–æ–¥ `;
    }
    countdownString += `${minutes} —Ö–≤`;

    return countdownString.trim();
}

// --- –ß–∞—Å—Ç–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó generateMetricsGroupHTML ---

function generateMetricsGroupHTML(data) {
    const formatTime = (minutes) => minutes > 0 ? `${minutes} —Ö–≤` : 'N/A';
    
    // üõë –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –î–õ–Ø –¢–ê–ô–ú–ï–†–ê
    const countdownHTML = getTaskCountdownHTML(data.lastCompletedAt, data.repeatInterval);

    // –ó–±–∏—Ä–∞—î–º–æ –æ–∫—Ä–µ–º—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
    const metricsContent = 
        generateMetricHTML('–û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å', formatTime(data.estimatedTime)) +
        generateMetricHTML('–ú—ñ–Ω. —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', formatTime(data.minCompletionTime)) +
        generateMetricHTML('–í–∏–∫–æ–Ω–∞–Ω–æ', `${data.completionCount} —Ä–∞–∑`) +
        // üõë –¢–£–¢ –í–°–¢–ê–í–õ–Ø–Ñ–ú–û –†–ï–ó–£–õ–¨–¢–ê–¢ –†–û–ó–†–ê–•–£–ù–ö–£ –¢–ê–ô–ú–ï–†–ê
        generateMetricHTML('–ù–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫.', countdownHTML); 
        
    return metricsContent;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏.
 * @param {string} label - –¢–µ–∫—Å—Ç –º—ñ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å").
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "45 —Ö–≤" –∞–±–æ HTML –¥–ª—è —Ç–∞–π–º–µ—Ä–∞).
 * @returns {string} - HTML-—Ä—è–¥–æ–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏.
 */
function generateMetricHTML(label, value) {
    return `
        <div class="metric-item">
            <span class="metric-value">${value}</span>
            <span class="metric-label">${label}</span>
        </div>
    `;
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
// const countdown = getTaskCountdownHTML(taskData.lastCompletedAt, taskData.repeatInterval);

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î Unix-—Ç–∞–π–º—à—Ç–∞–º–ø (—É —Å–µ–∫—É–Ω–¥–∞—Ö) —á–∞—Å—É, —è–∫–∏–π –±—É–≤ 15 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É.
 * @returns {number} Unix-—Ç–∞–π–º—à—Ç–∞–º–ø —É —Å–µ–∫—É–Ω–¥–∞—Ö.
 */
function getTimestampFifteenMinutesAgo() {
    // 1. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Date.now())
    const nowInMs = Date.now();
    
    // 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 15 —Ö–≤–∏–ª–∏–Ω
    // 15 —Ö–≤–∏–ª–∏–Ω * 60 —Å–µ–∫—É–Ω–¥/—Ö–≤–∏–ª–∏–Ω–∞ * 1000 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥/—Å–µ–∫—É–Ω–¥–∞
    const fifteenMinutesInMs = 15 * 60 * 1000;
    
    // 3. –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å 15 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    const timeAgoInMs = nowInMs - fifteenMinutesInMs;
    
    // 4. –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Å–µ–∫—É–Ω–¥–∏ (Unix-—Ç–∞–π–º—à—Ç–∞–º–ø)
    // —ñ –æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
    const timestampInSeconds = Math.floor(timeAgoInMs / 1000);
    
    return timestampInSeconds;
}


const sampleTasks = [
    { uuid: 'a1', section: 'blockers', title: '–ó–∞–¥–∞—á–∞ –ë', description: '–û–ø–∏—Å –ë', benefit: '–ö–æ—Ä–∏—Å—Ç—å –ë', estimatedTime: 15, lastCompletedAt: 1678886400, completionCount: 3, repeatInterval: 3600, minCompletionTime: 10 },
    { uuid: 'b2', section: 'drivers', title: '–ó–∞–¥–∞—á–∞ –ê', description: '–û–ø–∏—Å –ê', benefit: '–ö–æ—Ä–∏—Å—Ç—å –ê', estimatedTime: 60, lastCompletedAt: getTimestampFifteenMinutesAgo(), completionCount: 1, repeatInterval: 60, minCompletionTime: 5 },
    { uuid: 'c3', section: 'accelerators', title: '–ó–∞–¥–∞—á–∞ –í', description: '–û–ø–∏—Å –í', benefit: '–ö–æ—Ä–∏—Å—Ç—å –í', estimatedTime: 20, lastCompletedAt: null, completionCount: 0, repeatInterval: 3600, minCompletionTime: 15 },
];
